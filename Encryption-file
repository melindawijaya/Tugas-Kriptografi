import tkinter as tk
from tkinter import filedialog
import numpy as np

def letterorder(letter):
    letter = letter.lower()
    if letter >= 'a' and letter <= 'z':
        return ord(letter) - ord('a')
    else:
        return -1

def vigenereEncryption(plaintext, key):
    ciphertext = ""
    j = 0

    for i in range(len(plaintext)):
        currentLetter = plaintext[i]
        p = letterorder(currentLetter)

        if p != -1:
            k = key[j % len(key)]
            shift = letterorder(k)
            c = (p + shift) % 26
            encryptedChar = chr(ord('a') + c)
            ciphertext += encryptedChar
            j += 1
        else:
            ciphertext += currentLetter

    return ciphertext

def vigenereDecryption(ciphertext, key):
    plaintext = ""
    j = 0

    for i in range(len(ciphertext)):
        currentLetter = ciphertext[i]
        c = letterorder(currentLetter)

        if c != -1:
            k = key[j % len(key)]
            shift = letterorder(k)
            p = (c - shift + 26) % 26
            decryptedChar = chr(ord('a') + p)
            plaintext += decryptedChar
            j += 1
        else:
            plaintext += currentLetter

    return plaintext

def generate_key_matrix(key):
    key = key.replace('J', 'I').upper()
    key_matrix = []
    for char in key:
        if char not in key_matrix and char.isalpha():
            key_matrix.append(char)
    alphabet = 'ABCDEFGHIKLMNOPQRSTUVWXYZ'
    for char in alphabet:
        if char not in key_matrix:
            key_matrix.append(char)
    
    # Convert key_matrix into 5x5 matrix
    key_matrix_2d = [key_matrix[i:i + 5] for i in range(0, len(key_matrix), 5)]
    return key_matrix_2d

def find_indices(char, matrix):
    for i in range(5):
        for j in range(5):
            if matrix[i][j] == char:
                return i, j

def playfair_cipher(plaintext, key, mode='encrypt'):
    key_matrix = generate_key_matrix(key)
    ciphertext = ""
    plaintext = plaintext.replace('J', 'I').upper().replace(' ', '')
    if len(plaintext) % 2 != 0:
        plaintext += 'X'
    
    for i in range(0, len(plaintext), 2):
        char1, char2 = plaintext[i], plaintext[i+1]
        row1, col1 = find_indices(char1, key_matrix)
        row2, col2 = find_indices(char2, key_matrix)

        if row1 == row2:
            if mode == 'encrypt':
                ciphertext += key_matrix[row1][(col1+1)%5] + key_matrix[row2][(col2+1)%5]
            else:
                ciphertext += key_matrix[row1][(col1-1)%5] + key_matrix[row2][(col2-1)%5]
        elif col1 == col2:
            if mode == 'encrypt':
                ciphertext += key_matrix[(row1+1)%5][col1] + key_matrix[(row2+1)%5][col2]
            else:
                ciphertext += key_matrix[(row1-1)%5][col1] + key_matrix[(row2-1)%5][col2]
        else:
            ciphertext += key_matrix[row1][col2] + key_matrix[row2][col1]

    return ciphertext

def mod_inverse(a, m):
    for x in range(m):
        if (a*x) % m == 1:
            return x
    return None

def hill_cipher(plaintext, key_matrix):
    plaintext = plaintext.upper().replace(' ', '')
    while len(plaintext) % len(key_matrix) != 0:
        plaintext += 'X'

    plaintext_vectors = []
    for i in range(0, len(plaintext), len(key_matrix)):
        vector = [ord(char) - ord('A') for char in plaintext[i:i+len(key_matrix)]]
        plaintext_vectors.append(np.array(vector))

    ciphertext = ""
    for vector in plaintext_vectors:
        ciphertext_vector = np.dot(key_matrix, vector) % 26
        ciphertext += ''.join([chr(int(i) + ord('A')) for i in ciphertext_vector])

    return ciphertext

def hill_decryption(ciphertext, key_matrix):
    det = int(np.round(np.linalg.det(key_matrix))) % 26
    inv_det = mod_inverse(det, 26)

    if inv_det is None:
        raise ValueError("Determinan matriks kunci tidak memiliki invers modulo 26")

    inv_key_matrix = (inv_det * np.linalg.inv(key_matrix) * det) % 26
    inv_key_matrix = np.round(inv_key_matrix).astype(int) % 26

    return hill_cipher(ciphertext, inv_key_matrix)

def encrypt_decrypt(mode):
    chosen_cipher = cipher_var.get()
    plaintext = plaintext_entry.get()
    key = key_entry.get()

    # Validasi panjang key
    if len(key) < 12:
        result_label.config(text="Kunci harus minimal 12 karakter!")
        return
    
    if plaintext == "" and file_path == "":
        result_label.config(text="Masukkan plaintext atau unggah file terlebih dahulu!")
        return
    
    if file_path != "":
        try:
            with open(file_path, 'r') as file:
                plaintext = file.read()
        except Exception as e:
            result_label.config(text=f"Error reading file: {e}")
            return

    if chosen_cipher == "Vigenere Encryption":
        if mode == "encrypt":
            ciphertext = vigenereEncryption(plaintext, key)
        else:
            ciphertext = vigenereDecryption(plaintext, key)
    elif chosen_cipher == "Playfair Cipher":
        ciphertext = playfair_cipher(plaintext, key, mode)
    else:
        key_matrix = np.array([[7, 8], [11, 11]])  # Matriks kunci contoh untuk Hill Cipher
        if mode == "encrypt":
            ciphertext = hill_cipher(plaintext.upper(), key_matrix)
        else:
            ciphertext = hill_decryption(plaintext.upper(), key_matrix)

    result_label.config(text=f"Result ({mode}ed): " + ciphertext)

def upload_file():
    global file_path
    file_path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
    if file_path:
        file_label.config(text="File loaded: " + file_path)

# Create GUI window
root = tk.Tk()
root.title("Cipher Encryption and Decryption")

# Variable for uploaded file path
file_path = ""

# Create GUI elements
cipher_var = tk.StringVar()
cipher_var.set("Vigenere Encryption")
cipher_option = tk.OptionMenu(root, cipher_var, "Vigenere Encryption", "Playfair Cipher", "Hill Cipher")
cipher_option.pack()

plaintext_label = tk.Label(root, text="Masukkan plaintext (atau unggah file):")
plaintext_label.pack()

plaintext_entry = tk.Entry(root)
plaintext_entry.pack()

key_label = tk.Label(root, text="Masukkan key (minimal 12 karakter):")
key_label.pack()

key_entry = tk.Entry(root)
key_entry.pack()

# Button for uploading file
upload_button = tk.Button(root, text="Unggah File .txt", command=upload_file)
upload_button.pack()

file_label = tk.Label(root, text="")
file_label.pack()

encrypt_button = tk.Button(root, text="Enkripsi", command=lambda: encrypt_decrypt("encrypt"))
encrypt_button.pack()

decrypt_button = tk.Button(root, text="Dekripsi", command=lambda: encrypt_decrypt("decrypt"))
decrypt_button.pack()

result_label = tk.Label(root, text="")
result_label.pack()

# Run the GUI
root.mainloop()
